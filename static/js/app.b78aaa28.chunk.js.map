{"version":3,"sources":["src/utils/supabase.ts","src/screens/Movie.tsx","src/screens/About.tsx","App.tsx","src/utils/index.ts"],"names":["client","createClient","localStorage","AsyncStorage","detectSessionInUrl","MovieScreen","route","useRoute","movieId","params","id","useState","data","title","posterUrl","error","loading","setState","useEffect","a","async","from","select","eq","single","console","log","Error","prev","fetchData","ScrollView","automaticallyAdjustContentInsets","StatusBar","barStyle","SafeAreaView","edges","ImageBackground","style","width","height","position","source","uri","cache","View","top","left","backgroundColor","paddingTop","Text","bottom","color","fontSize","fontWeight","padding","director","name","duration","borderRadius","paddingHorizontal","paddingVertical","display","maxWidth","textAlign","classification","description","trailerUrl","flex","javaScriptEnabled","AboutScreen","animated","opacity","marginBottom","marginTop","TouchableOpacity","borderWidth","borderColor","justifyContent","alignItems","alignContent","flexDirection","onPress","Linking","openURL","marginRight","fill","stroke","marginVertical","Notifications","handleNotification","shouldShowAlert","shouldPlaySound","shouldSetBadge","Stack","createNativeStackNavigator","now","Date","HomeScreen","navigation","useNavigation","permissionStatus","registerForPushNotifications","Device","existingStatus","status","finalStatus","alert","token","Platform","OS","importance","MAX","vibrationPattern","lightColor","registerForPushNotificationsAsync","then","insert","all","startOfDay","selectedDate","setSelectedDate","useWindowDimensions","Math","min","numberOfColumns","round","posterWidth","onChange","_value","headerTitle","formatRelative","setOptions","headerLeft","navigate","headerRight","textColor","themeVariant","minimumDate","startOfMonth","subMonths","maximumDate","endOfWeek","addWeeks","value","mode","useCallback","order","ascending","gte","toISOString","lte","endOfDay","length","styles","container","granted","marginLeft","FlatList","refreshControl","RefreshControl","onRefresh","refreshing","numColumns","renderItem","presentation","item","movie","paddingBottom","shadowColor","shadowOffset","shadowOpacity","shadowRadius","overflow","resizeMode","room","formatInTimeZone","date","year","Array","tmdbRating","map","_","index","columnWrapperStyle","margin","marginHorizontal","contentInsetAdjustmentBehavior","ActivityIndicator","size","JSON","stringify","Navigation","NavigationContainer","Navigator","Screen","options","headerTintColor","component","headerTransparent","headerBackTitle","headerBackTitleVisible","goBack","StyleSheet","create"],"mappings":"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","file":"static/js/app.b78aaa28.chunk.js","sourcesContent":["import { createClient } from '@supabase/supabase-js'\nimport AsyncStorage from '@react-native-async-storage/async-storage'\n\nconst SUPABASE_ANON_KEY =\n  'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inl6aGJla2hvbnN1aGFwdG14Y2trIiwicm9sZSI6ImFub24iLCJpYXQiOjE2NDQ0MjgzMzcsImV4cCI6MTk2MDAwNDMzN30.8ZNeKaJZsPvHs9UFYPT4AM2CB4LHyZIHh5pSPuuvXks'\nconst SUPABASE_PROJECT = 'https://yzhbekhonsuhaptmxckk.supabase.co'\n\nexport const client = createClient(SUPABASE_PROJECT, SUPABASE_ANON_KEY, {\n  localStorage: AsyncStorage as any,\n  detectSessionInUrl: false,\n})\n","import { useEffect, useState } from 'react'\nimport {\n  ScrollView,\n  Text,\n  ImageBackground,\n  View,\n  StatusBar,\n} from 'react-native'\nimport { SafeAreaView } from 'react-native-safe-area-context'\nimport { WebView } from 'react-native-webview'\nimport { useRoute } from '@react-navigation/native'\n\nimport { client } from '../utils/supabase'\n\nfunction MovieScreen() {\n  const route = useRoute()\n  const movieId = (route.params as any)?.id\n  const [{ data }, setState] = useState<any>({\n    data: {\n      title: (route.params as any)?.title,\n      posterUrl: (route.params as any)?.posterUrl,\n    },\n    error: null,\n    loading: true,\n  })\n\n  useEffect(() => {\n    async function fetchData() {\n      setState({ error: null, data: null, loading: true })\n\n      try {\n        const { data, error } = await client\n          .from('movies')\n          .select(\n            `\n            id,\n            title,\n            posterUrl,\n            duration,\n            tmdbRating,\n            year,\n            classification,\n            description,\n            trailerUrl,\n            director (\n                name\n            )\n            `,\n          )\n          .eq('id', movieId)\n          .single()\n\n        if (error) {\n          console.log(error)\n          throw new Error('Could not get presentations')\n        }\n\n        setState({ data, loading: false, error })\n      } catch (error) {\n        console.log(error)\n        setState((prev: any) => ({ ...prev, loading: false, error }))\n      }\n    }\n\n    fetchData()\n  }, [])\n\n  return (\n    <ScrollView automaticallyAdjustContentInsets>\n      <StatusBar barStyle=\"light-content\" />\n      <SafeAreaView edges={['bottom', 'left', 'right']}>\n        <ImageBackground\n          style={{ width: '100%', height: 250, position: 'relative' }}\n          source={{ uri: data?.posterUrl, cache: 'force-cache' }}\n        >\n          <View\n            style={{\n              position: 'absolute',\n              top: 0,\n              left: 0,\n              width: '100%',\n              height: '100%',\n              backgroundColor: 'rgba(0,0,0,0.3)',\n              paddingTop: 50,\n            }}\n          />\n          <Text\n            style={{\n              position: 'absolute',\n              bottom: 0,\n              left: 0,\n              color: 'white',\n              fontSize: 35,\n              fontWeight: '600',\n              padding: 10,\n            }}\n          >\n            {data?.title}\n          </Text>\n        </ImageBackground>\n        <View style={{ padding: 10 }}>\n          <Text style={{ color: 'black' }}>\n            <Text style={{ fontWeight: '800' }}>Dirección</Text>{' '}\n            {data?.director?.name}\n          </Text>\n          <Text style={{ color: 'black' }}>\n            <Text style={{ fontWeight: '800' }}>Duración</Text> {data?.duration}{' '}\n            min\n          </Text>\n          <Text>Clasificación</Text>\n          <View\n            style={{\n              backgroundColor: 'black',\n              borderRadius: 4,\n              paddingHorizontal: 5,\n              paddingVertical: 2.5,\n              display: 'flex',\n              maxWidth: 40,\n            }}\n          >\n            <Text\n              style={{\n                color: 'white',\n                fontWeight: '700',\n                fontSize: 12,\n                textAlign: 'center',\n              }}\n            >\n              {data?.classification}\n            </Text>\n          </View>\n          {/* <Text style={{ color: 'black' }}>{data?.tmdbRating}</Text> */}\n        </View>\n\n        {data?.description ? (\n          <>\n            <Text\n              style={{\n                fontWeight: '700',\n                color: 'black',\n                padding: 10,\n                fontSize: 18,\n              }}\n            >\n              Description\n            </Text>\n            <Text style={{ color: 'black', paddingHorizontal: 10 }}>\n              {data.description}\n            </Text>\n          </>\n        ) : null}\n\n        {data?.trailerUrl ? (\n          <>\n            <Text\n              style={{\n                fontWeight: '700',\n                color: 'black',\n                padding: 10,\n                fontSize: 18,\n              }}\n            >\n              Trailer\n            </Text>\n            <WebView\n              style={{ flex: 1, width: '100%', height: 200 }}\n              javaScriptEnabled={true}\n              source={{ uri: data.trailerUrl }}\n            />\n          </>\n        ) : null}\n\n        {/* <View style={{ marginTop: 10 }}>\n          <Text\n            style={{\n              fontWeight: '700',\n              color: 'black',\n              padding: 10,\n              fontSize: 18,\n            }}\n          >\n            Presentaciones\n          </Text>\n          <Text style={{ color: 'red' }}>{JSON.stringify(all, null, 10)}</Text>\n          <View>\n            <View\n              style={{\n                borderTopWidth: 1,\n                borderColor: '#ddd',\n                padding: 10,\n                display: 'flex',\n                flexDirection: 'row',\n                justifyContent: 'space-between',\n              }}\n            >\n              <Text>Jueves 18, 10:00AM</Text>\n              <Text>Sala 1</Text>\n            </View>\n          </View>\n        </View> */}\n      </SafeAreaView>\n    </ScrollView>\n  )\n}\n\nexport default MovieScreen\nfunction setState(arg0: { error: null; data: null; loading: boolean }) {\n  throw new Error('Function not implemented.')\n}\n","import { View, Text, TouchableOpacity, StatusBar, Linking } from 'react-native'\nimport { Github } from 'react-native-feather'\n\nfunction AboutScreen() {\n  return (\n    <View style={{ flex: 1, padding: 20, backgroundColor: 'white' }}>\n      <StatusBar animated barStyle=\"light-content\" />\n      <Text\n        style={{\n          fontWeight: '600',\n          opacity: 0.8,\n          textAlign: 'center',\n          marginBottom: 30,\n          marginTop: 10,\n          fontSize: 16,\n        }}\n      >\n        App no oficial de la Cineteca del Estado de México\n      </Text>\n      <TouchableOpacity\n        style={{\n          borderWidth: 1,\n          borderRadius: 10,\n          borderColor: '#eee',\n          backgroundColor: '#f6f6f6',\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          alignContent: 'center',\n          flexDirection: 'row',\n          padding: 5,\n        }}\n        onPress={() => Linking.openURL('https://github.com/cesargdm/mexteca')}\n      >\n        <Text style={{ fontWeight: '700', marginRight: 5 }}>Github</Text>\n        <Github fill=\"black\" stroke={0} />\n      </TouchableOpacity>\n      <View style={{ marginVertical: 10 }}>\n        <Text style={{ fontWeight: '700', fontSize: 18 }}>Aviso</Text>\n        <Text>\n          No nos hacemos responsables por cambios en los horarios, funciones,\n          disponibilidad o cualquier cambio de la información aquí presentada.\n        </Text>\n      </View>\n      <View style={{ marginVertical: 10 }}>\n        <Text style={{ fontWeight: '700', fontSize: 18 }}>Créditos</Text>\n        <Text>Cineteca Mexiquense</Text>\n        <Text>The Movie Database</Text>\n      </View>\n    </View>\n  )\n}\n\nexport default AboutScreen\n","import 'react-native-url-polyfill/auto'\n\nimport { useCallback, useEffect, useState } from 'react'\nimport {\n  Text,\n  View,\n  FlatList,\n  StatusBar,\n  StyleSheet,\n  RefreshControl,\n  ImageBackground,\n  TouchableOpacity,\n  ActivityIndicator,\n  useWindowDimensions,\n} from 'react-native'\nimport {\n  NavigationContainer,\n  useNavigation,\n  useRoute,\n} from '@react-navigation/native'\nimport { Star, Info, X } from 'react-native-feather'\nimport { formatInTimeZone } from 'date-fns-tz'\nimport { startOfDay, endOfDay } from 'date-fns/esm'\nimport { createNativeStackNavigator } from '@react-navigation/native-stack'\nimport DateTimePicker from '@react-native-community/datetimepicker'\nimport * as Notifications from 'expo-notifications'\nimport { Bell } from 'react-native-feather'\nimport {\n  addWeeks,\n  endOfWeek,\n  formatRelative,\n  startOfMonth,\n  subMonths,\n} from 'date-fns'\nimport { Provider } from 'react-supabase'\n\nimport { registerForPushNotificationsAsync } from './src/utils'\nimport { client } from './src/utils/supabase'\n\nimport MovieScreen from './src/screens/Movie'\nimport AboutScreen from './src/screens/About'\n\nNotifications.setNotificationHandler({\n  handleNotification: async () => ({\n    shouldShowAlert: true,\n    shouldPlaySound: false,\n    shouldSetBadge: false,\n  }),\n})\n\nconst Stack = createNativeStackNavigator()\n\nconst now = new Date()\n\nfunction HomeScreen() {\n  const navigation = useNavigation<any>()\n  const route = useRoute()\n  const [permissionStatus] = Notifications.usePermissions()\n\n  function registerForPushNotifications() {\n    registerForPushNotificationsAsync().then((token) => {\n      if (!token) return\n      client\n        .from('notificationSettings')\n        .insert({ token, all: true })\n        .then(({ data }) => {\n          if (data)\n            alert('Te avisaremos cuando se publiquen una nuevas funciones')\n          else alert('Hubo un problema al registrarte')\n        })\n    })\n  }\n\n  const [selectedDate, setSelectedDate] = useState(startOfDay(now))\n  const [{ data, error, loading }, setState] = useState<any>({\n    data: null,\n    error: null,\n    loading: true,\n  })\n\n  let { width } = useWindowDimensions()\n  const maxWidth = Math.min(width, 800)\n  const numberOfColumns = Math.round(maxWidth / 200)\n  const posterWidth = maxWidth / numberOfColumns\n\n  useEffect(() => {\n    function onChange(_value: any, selectedDate: any) {\n      setSelectedDate(startOfDay(selectedDate))\n    }\n\n    const headerTitle = formatRelative(selectedDate, now)\n\n    navigation.setOptions({\n      headerTitle,\n      headerLeft() {\n        return (\n          <TouchableOpacity onPress={() => navigation.navigate('AboutScreen')}>\n            <Info width={30} height={30} />\n          </TouchableOpacity>\n        )\n      },\n      headerRight() {\n        return (\n          <View style={{ width: 100 }}>\n            <DateTimePicker\n              textColor=\"black\"\n              themeVariant=\"light\"\n              minimumDate={startOfMonth(subMonths(now, 1))}\n              maximumDate={endOfWeek(addWeeks(now, 1))}\n              value={selectedDate}\n              mode=\"date\"\n              display=\"compact\"\n              onChange={onChange}\n            />\n          </View>\n        )\n      },\n    })\n  }, [navigation, route, selectedDate])\n\n  const fetchData = useCallback(async () => {\n    setState({ error: null, data: null, loading: true })\n\n    try {\n      const { data, error } = await client\n        .from('presentations')\n        .select(\n          `\n          id,\n          date,\n          room,\n          movie (\n            id,\n            title,\n            posterUrl,\n            duration,\n            tmdbRating,\n            year,\n            classification\n          )\n        `,\n        )\n        .order('date', { ascending: true })\n        .gte('date', selectedDate.toISOString())\n        .lte('date', endOfDay(selectedDate).toISOString())\n\n      if (error) {\n        console.log(error)\n        throw new Error('Could not get presentations')\n      }\n\n      setState({ data, loading: false, error })\n    } catch (error) {\n      console.log(error)\n      setState((prev: any) => ({ ...prev, loading: false, error }))\n    }\n  }, [selectedDate])\n\n  useEffect(() => {\n    fetchData()\n  }, [selectedDate])\n\n  function renderItem({ item: presentation }: any) {\n    return (\n      <TouchableOpacity\n        onPress={() =>\n          navigation.navigate('MovieScreen', {\n            id: presentation.movie.id,\n            title: presentation.movie.title,\n            posterUrl: presentation.movie.posterUrl,\n          })\n        }\n        style={{ width: posterWidth, padding: 10, paddingBottom: 20 }}\n      >\n        <View\n          style={{\n            shadowColor: '#000',\n            shadowOffset: { width: 0, height: 0 },\n            shadowOpacity: 0.2,\n            shadowRadius: 4,\n          }}\n        >\n          <ImageBackground\n            style={{\n              width: '100%',\n              height: posterWidth * 1.48,\n              borderRadius: 5,\n              borderWidth: 1,\n              borderColor: '#ddd',\n              overflow: 'hidden',\n            }}\n            resizeMode=\"cover\"\n            source={{ uri: presentation.movie.posterUrl }}\n          >\n            <View\n              style={{\n                padding: 5,\n                display: 'flex',\n                flexDirection: 'row',\n                justifyContent: 'space-between',\n              }}\n            >\n              <Text\n                style={{\n                  backgroundColor: 'rgba(0,0,0,0.5)',\n                  fontWeight: '800',\n                  fontSize: 10,\n                  borderRadius: 4,\n                  overflow: 'hidden',\n                  color: 'white',\n                  padding: 2,\n                  paddingHorizontal: 5,\n                }}\n              >\n                Sala {presentation.room}\n              </Text>\n              <Text\n                style={{\n                  fontWeight: '700',\n                  fontSize: 12,\n                  color: 'white',\n                }}\n              >\n                {formatInTimeZone(\n                  presentation.date,\n                  'America/Mexico_City',\n                  'h:mm aaa',\n                )}\n              </Text>\n            </View>\n          </ImageBackground>\n        </View>\n\n        <Text\n          style={{\n            marginTop: 5,\n            color: 'black',\n            width: '100%',\n            fontWeight: '700',\n            fontSize: 18,\n            textAlign: 'center',\n          }}\n        >\n          {presentation.movie.title ?? 'No title'}\n        </Text>\n        <Text\n          style={{\n            color: '#666',\n            textAlign: 'center',\n            fontSize: 13,\n            marginTop: 2.5,\n          }}\n        >\n          {presentation.movie.year} · {presentation.movie.duration} min ·{' '}\n          {presentation.movie.classification}\n        </Text>\n        <View\n          style={{\n            marginTop: 2.5,\n            display: 'flex',\n            flexDirection: 'row',\n            justifyContent: 'center',\n            marginBottom: 10,\n          }}\n        >\n          <View style={{ display: 'flex', flexDirection: 'row' }}>\n            {new Array(Math.round(presentation.movie.tmdbRating / 2))\n              .fill(null)\n              .map((_, index) => (\n                <Star\n                  key={index}\n                  width={12.5}\n                  height={12.5}\n                  stroke=\"none\"\n                  fill=\"gold\"\n                />\n              ))}\n          </View>\n        </View>\n      </TouchableOpacity>\n    )\n  }\n\n  if (!data) {\n    if (loading) {\n      return (\n        <View\n          style={[\n            styles.container,\n            { justifyContent: 'center', alignItems: 'center' },\n          ]}\n        >\n          <ActivityIndicator size=\"large\" />\n          <Text style={{ color: 'black', marginTop: 4, fontWeight: '800' }}>\n            Obteniendo cartelera\n          </Text>\n        </View>\n      )\n    }\n    return (\n      <View\n        style={[\n          styles.container,\n          { justifyContent: 'center', alignItems: 'center' },\n        ]}\n      >\n        <Text style={{ color: 'black', marginTop: 4, fontWeight: '800' }}>\n          Error\n          {JSON.stringify(error)}\n        </Text>\n      </View>\n    )\n  }\n\n  if (data.length === 0) {\n    return (\n      <View\n        style={[\n          styles.container,\n          { justifyContent: 'center', alignItems: 'center', padding: 20 },\n        ]}\n      >\n        <Text\n          style={{\n            color: 'black',\n            textAlign: 'center',\n            fontSize: 20,\n            fontWeight: '700',\n            opacity: 0.9,\n          }}\n        >\n          No hemos encontrado funciones para este día, intenta revisar después\n        </Text>\n        {!permissionStatus?.granted ? (\n          <TouchableOpacity onPress={() => registerForPushNotifications()}>\n            <Text style={{ marginTop: 30, opacity: 0.6, fontWeight: '600' }}>\n              Si quieres también podemos avisarte\n            </Text>\n            <View\n              style={{\n                display: 'flex',\n                flexDirection: 'row',\n                alignContent: 'center',\n                justifyContent: 'center',\n              }}\n            >\n              <Bell width={15} height={15} stroke=\"black\" fill=\"black\" />\n              <Text\n                style={{\n                  alignItems: 'center',\n                  fontWeight: '800',\n                  color: 'black',\n                  marginLeft: 5,\n                }}\n              >\n                recibir notificaciones\n              </Text>\n            </View>\n          </TouchableOpacity>\n        ) : null}\n      </View>\n    )\n  }\n\n  return (\n    <View style={{ flex: 1 }}>\n      <FlatList\n        refreshControl={\n          <RefreshControl onRefresh={() => fetchData()} refreshing={false} />\n        }\n        key={numberOfColumns}\n        numColumns={numberOfColumns}\n        data={data}\n        renderItem={renderItem}\n        columnWrapperStyle={{\n          maxWidth: 800,\n          margin: 0,\n          marginHorizontal: 'auto',\n        }}\n        contentInsetAdjustmentBehavior=\"automatic\"\n        style={styles.container}\n      />\n    </View>\n  )\n}\n\nexport default function Navigation() {\n  return (\n    <>\n      <StatusBar barStyle=\"dark-content\" />\n      <Provider value={client}>\n        <NavigationContainer>\n          <Stack.Navigator>\n            <Stack.Screen\n              options={{\n                headerTintColor: 'black',\n              }}\n              name=\"HomeScreen\"\n              component={HomeScreen}\n            />\n            <Stack.Screen\n              options={{\n                headerTransparent: true,\n                headerTintColor: 'white',\n                title: '',\n                headerBackTitle: '',\n                headerBackTitleVisible: false,\n              }}\n              name=\"MovieScreen\"\n              component={MovieScreen}\n            />\n            <Stack.Screen\n              options={({ navigation }) => ({\n                title: 'Mexteca',\n                presentation: 'modal',\n                headerLeft: () => (\n                  <TouchableOpacity onPress={() => navigation.goBack()}>\n                    <X color=\"black\" height={30} width={30} />\n                  </TouchableOpacity>\n                ),\n              })}\n              name=\"AboutScreen\"\n              component={AboutScreen}\n            />\n          </Stack.Navigator>\n        </NavigationContainer>\n      </Provider>\n    </>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f3f3f3',\n  },\n})\n","import { Platform } from 'react-native'\nimport * as Notifications from 'expo-notifications'\nimport * as Device from 'expo-device'\n\nexport async function registerForPushNotificationsAsync() {\n  let token\n  if (Device.isDevice) {\n    const { status: existingStatus } = await Notifications.getPermissionsAsync()\n    let finalStatus = existingStatus\n    if (existingStatus !== 'granted') {\n      const { status } = await Notifications.requestPermissionsAsync()\n      finalStatus = status\n    }\n    if (finalStatus !== 'granted') {\n      alert('Failed to get push token for push notification!')\n      return\n    }\n    token = (await Notifications.getExpoPushTokenAsync()).data\n    console.log(token)\n  } else {\n    return alert('Must use physical device for Push Notifications')\n  }\n\n  if (Platform.OS === 'android') {\n    Notifications.setNotificationChannelAsync('default', {\n      name: 'default',\n      importance: Notifications.AndroidImportance.MAX,\n      vibrationPattern: [0, 250, 250, 250],\n      lightColor: '#FF231F7C',\n    })\n  }\n\n  return token\n}\n"],"sourceRoot":""}